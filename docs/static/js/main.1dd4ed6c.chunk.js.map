{"version":3,"sources":["../../src/components/tiles/styles.ts","../../src/components/tiles/index.tsx","../../src/constants/tiles.ts","../../src/components/scenarios/styles.ts","../../src/components/tooltip/index.tsx","../../src/utils/scenarios.ts","../../src/components/scenarios/index.tsx","../../src/index.tsx","App.tsx","index.tsx"],"names":["Styles","borderRadius","cursor","Tiles","height","width","margin","onClick","isHighlighted","disable","keepHighlighted","role","key","Date","toISOString","Math","style","pointerEvents","background","animation","animationDuration","animationDirection","animationPlayState","animationTimingFunction","animationIterationCount","display","flexWrap","justifyItems","Tooltip","text","left","marginTop","backgroundColor","textAlign","className","styles","checkHighlighted","positions","pos","posx","posy","getHighlightedTiles","numOfTiles","highlightedTiles","grid","n","row","col","obj","Scenarios","scenario","onPressTiles","instructions","status","positionsSelected","handleOnClick","Array","position","index","calculatorPosition","TILES_SPACE","isPause","post","styleSheet","document","initStatus","isPost","isPre","showGrid","Psychometrics","configuration","scenarios","useState","screen","setScreen","displayTime","setDisplayTime","setStatus","setPositionSelected","res","useMemo","userResponse","console","max","clearInterval","useEffect","time","idInterval","setInterval","timeFloor","maxTime","dips","handleNextScreen","isCorrect","countCorrect","clearTimeout","idTimeOut","setTimeout","App","require","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.1dd4ed6c.chunk.js","sourcesContent":["import { CSSProperties } from 'react';\n\nexport const Styles: { [k: string]: CSSProperties } = {\n  container: {\n    borderRadius: 6,\n    cursor: 'pointer'\n  }\n};\n","import * as React from 'react';\nimport { Styles } from './styles';\nimport { BG_HIGHLIGHTED, BG_HIGHLIGHTER } from '../../constants/tiles';\n\ninterface TitlesProps {\n  width: number;\n  height: number;\n  margin: number;\n  onClick: () => void;\n  isHighlighted: boolean;\n  disable: boolean;\n  keepHighlighted: boolean;\n}\n\nexport const Tiles = ({\n  height,\n  width,\n  margin,\n  onClick,\n  isHighlighted,\n  disable,\n  keepHighlighted\n}: TitlesProps) => {\n  return (\n    <div\n      role='button'\n      {...{ onClick }}\n      key={new Date().toISOString() + Math.random()}\n      style={{\n        ...Styles.container,\n        width,\n        height,\n        margin,\n        pointerEvents: disable ? 'none' : 'all',\n        background: keepHighlighted ? BG_HIGHLIGHTER : BG_HIGHLIGHTED,\n        animation: 'anim-highlighted',\n        animationDuration: '0.16s',\n        animationDirection: 'alternate',\n        animationPlayState: 'running',\n        animationTimingFunction: 'ease-in-out',\n        animationIterationCount: isHighlighted ? 'infinite' : 0\n      }}\n    />\n  );\n};\n","export const TILES_WIDTH = 50;\nexport const TILES_HEIGHT = 50;\nexport const TILES_SPACE = 6;\nexport const BG_HIGHLIGHTED = '#414ba5';\nexport const BG_HIGHLIGHTER = 'white';\n","import { CSSProperties } from 'react';\n\nexport const Styles: { [k: string]: CSSProperties } = {\n  grid: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyItems: 'center'\n  }\n};\n","import * as React from 'react';\nimport styles from './styles.css';\n\ninterface TooltipProps {\n  text: string;\n  left: string;\n  marginTop: string;\n}\n\nexport const Tooltip = ({ text, left, marginTop }: TooltipProps) => {\n  return (\n    <div\n      style={{ left, marginTop, backgroundColor: 'white', textAlign: 'center' }}\n      className={styles.container}\n    >\n      <span className={styles.text}>{text}</span>\n    </div>\n  );\n};\n","import { Positions, Scenarios } from '../types';\n\nexport function calculatorPosition(index: number, col: number) {\n  return {\n    posx: index % col,\n    posy: Math.floor(index / col)\n  };\n}\n\nexport function checkHighlighted(positions: Positions[], pos: Positions) {\n  return (\n    positions &&\n    !!positions.find(({ posx, posy }) => posx === pos.posx && posy === pos.posy)\n  );\n}\n\nexport function getHighlightedTiles({\n  highlightedTiles: numOfTiles,\n  grid\n}: Scenarios) {\n  const [row, col] = grid.split('*').map((n) => +n || 0);\n  const highlightedTiles: Positions[] = [];\n  while (true) {\n    if (highlightedTiles.length === Math.min(numOfTiles, row * col)) {\n      break;\n    }\n    const posx = Math.floor(Math.random() * col);\n    const posy = Math.floor(Math.random() * row);\n    const isExists = highlightedTiles.find(\n      (obj) => obj?.posx === posx && obj?.posy === posy\n    );\n    if (!isExists) {\n      highlightedTiles.push({ posx, posy });\n    }\n  }\n  return highlightedTiles;\n}\n","import React from 'react';\nimport { Tiles } from '../tiles';\nimport {\n  Scenarios as ScenariosType,\n  Positions,\n  Instructions,\n  Status\n} from '../../types';\nimport { TILES_HEIGHT, TILES_WIDTH, TILES_SPACE } from '../../constants/tiles';\nimport { Styles } from './styles';\nimport { Tooltip } from '../tooltip';\nimport { calculatorPosition, checkHighlighted } from '../../utils';\n\ninterface ScenariosProps {\n  onPressTiles?: (positions: Positions) => void;\n  scenario: ScenariosType;\n  highlightedTiles: Positions[];\n  positionsSelected: Positions[];\n  instructions: Instructions;\n  status: Status;\n}\n\nexport const Scenarios = ({\n  scenario: { grid },\n  onPressTiles,\n  instructions,\n  highlightedTiles,\n  status,\n  positionsSelected\n}: ScenariosProps) => {\n  const [row, col] = grid?.split('*').map((n) => +n || 0);\n\n  const handleOnClick = React.useCallback(\n    (position: Positions) => {\n      return () => onPressTiles?.(position);\n    },\n    [onPressTiles]\n  );\n\n  function renderTiles(_: any, index: number) {\n    const position = calculatorPosition(index, col);\n    return (\n      <Tiles\n        width={TILES_WIDTH}\n        height={TILES_HEIGHT}\n        margin={TILES_SPACE / 2}\n        key={`tiles-${index}`}\n        onClick={handleOnClick(position)}\n        disable={!status.isPause}\n        keepHighlighted={checkHighlighted(positionsSelected, position)}\n        isHighlighted={\n          !status.isPause && checkHighlighted(highlightedTiles, position)\n        }\n      />\n    );\n  }\n  const width = col * TILES_WIDTH + TILES_SPACE * col;\n  const height = row * TILES_HEIGHT + TILES_SPACE * col;\n  return (\n    <div\n      style={{\n        ...Styles.grid,\n        width,\n        height\n      }}\n    >\n      {status.showGrid &&\n        Array.apply(null, new Array(row * col)).map(renderTiles)}\n      <Tooltip\n        marginTop={`${height + 16}px`}\n        left='calc(50% - 88px)'\n        text={status.isPre ? instructions?.pre : instructions?.post}\n      />\n    </div>\n  );\n};\n","import React, { useState, useMemo, useEffect } from 'react';\nimport styles from './styles.module.css';\nimport { Scenarios } from './components';\nimport { Configuration, Positions, Status, ResponseScenarios } from './types';\nimport { getHighlightedTiles, checkHighlighted } from './utils';\nimport { BG_HIGHLIGHTED, BG_HIGHLIGHTER } from './constants/tiles';\n\nconst styleSheet = document.styleSheets[0];\nconst styleKeyFrames = `\n    @keyframes anim-highlighted {\n      0%   {background-color:${BG_HIGHLIGHTED};}\n      100% {background-color:${BG_HIGHLIGHTER};}\n    }\n  `;\nstyleSheet.insertRule(styleKeyFrames, styleSheet.cssRules.length);\n\nlet idInterval: NodeJS.Timeout;\nlet idTimeOut: NodeJS.Timeout;\n\nexport interface PsychometricsProps {\n  configuration: Configuration;\n}\n\nconst initStatus = {\n  isPause: false,\n  isPost: false,\n  isPre: true,\n  showGrid: false\n};\n\nexport const Psychometrics = ({\n  configuration: { instructions, scenarios }\n}: PsychometricsProps) => {\n  const [screen, setScreen] = useState(0);\n  const scenario = scenarios[screen];\n  const [displayTime, setDisplayTime] = useState(0);\n  const [status, setStatus] = useState<Status>(initStatus);\n  const [positionsSelected, setPositionSelected] = useState<Positions[]>([]);\n  const res = useMemo<ResponseScenarios>(\n    () => ({\n      highlightedTiles: getHighlightedTiles(scenario),\n      userResponse: []\n    }),\n    [scenario, screen]\n  );\n  const { highlightedTiles, userResponse } = res;\n\n  function handleNextScreen() {\n    console.log(`Screen ${scenario.grid} response:`, {\n      scenario: { highlightedTiles, userResponse }\n    });\n    const max = scenarios.length - 1;\n    const index = Math.min(screen + 1, max);\n    clearInterval(idInterval);\n    if (index !== max) {\n      setScreen(() => index);\n      setStatus((s) => ({ ...s, isPause: false }));\n      setDisplayTime(() => scenario.postDisplayTime / 1000);\n      setPositionSelected(() => []);\n      res.userResponse = [];\n    } else {\n      console.log('Finished psychometrics assessments.');\n    }\n  }\n\n  function onPressTiles(position: Positions) {\n    const isCorrect = checkHighlighted(highlightedTiles, position);\n    if (!isCorrect) {\n      setPositionSelected(() => []);\n      res.userResponse = [];\n      clearTimeout(idTimeOut);\n      setStatus((s) => ({ ...s, isPause: isCorrect }));\n      idTimeOut = setTimeout(\n        () => setStatus((s) => ({ ...s, isPause: !isCorrect })),\n        500\n      );\n    } else {\n      if (\n        !userResponse.find(\n          ({ posx, posy }) => posx === position.posx && posy === position.posy\n        )\n      ) {\n        const positions = [...userResponse, position];\n        setPositionSelected(() => positions);\n        userResponse.push(position);\n        if (highlightedTiles.length === positions.length) {\n          let countCorrect = 0;\n          for (let index = 0; index < positions.length; index++) {\n            if (checkHighlighted(highlightedTiles, positions[index])) {\n              countCorrect += 1;\n            }\n          }\n          if (scenario.highlightedTiles === countCorrect) {\n            console.log('You Win!');\n            handleNextScreen();\n          }\n        }\n      }\n    }\n  }\n\n  useEffect(() => {\n    let time = 0.0;\n    idInterval = setInterval(() => {\n      if (status.isPre) {\n        if (time.toFixed(2) === '0.16') {\n          setStatus((s) => ({ ...s, showGrid: true }));\n        }\n        if (time.toFixed(2) === '0.17') {\n          setStatus((s) => ({\n            ...s,\n            isPost: true\n          }));\n        }\n        if (Math.floor(time) === scenario.preDisplayTime / 1000) {\n          setStatus((s) => ({\n            ...s,\n            isPre: false\n          }));\n        }\n      }\n      if (status.isPost && !status.isPre) {\n        if (time.toFixed(2) === '0.16') {\n          setStatus((s) => ({ ...s, isPause: true }));\n        }\n        const timeFloor = Math.floor(time);\n        const maxTime = scenario.postDisplayTime / 1000;\n        const dips = maxTime - timeFloor;\n        setDisplayTime(() => dips);\n        if (timeFloor === maxTime) {\n          res.userResponse = [];\n          handleNextScreen();\n        }\n      }\n      time += 0.001;\n    }, 0.001);\n    return () => {\n      clearInterval(idInterval);\n    };\n  }, [\n    setStatus,\n    screen,\n    status.isPost,\n    status.isPre,\n    scenario.postDisplayTime,\n    scenario.preDisplayTime\n  ]);\n  return (\n    <div className={styles.container}>\n      <p className={styles.displayTime}>{displayTime}</p>\n      <Scenarios\n        {...{\n          scenario,\n          onPressTiles,\n          highlightedTiles,\n          instructions,\n          status,\n          positionsSelected\n        }}\n      />\n    </div>\n  );\n};\n","import React from 'react'\n\nimport { Psychometrics } from 'psychometrics'\nimport 'psychometrics/dist/index.css'\n\nconst App = () => {\n  return <Psychometrics configuration={require('./mock/configuration.json')} />\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}